;; User behaviors
;; -----------------------------
;; Behaviors are stored as a set of diffs that are merged together
;; to create the final set of functionality that makes up Light Table. You can
;; modify these diffs to either add or subtract functionality.
;;
;; Behaviors are added to tags, objects with those tags then automatically gain
;; whatever logic the behavior imparts. To see a list of user-level behaviors,
;; start typing a word related to the functionality you want in between the square
;; brackets (e.g. "theme").

[
 ;; The app tag is kind of like global scope. You assign behaviors that affect
 ;; all of Light Table to it.
 [:app :lt.objs.style/set-skin "dark"]
 [:app :lt.objs.plugins/load-js "user_compiled.js"]

 ;; The editor tag is applied to all editors
 [:editor :lt.objs.editor/no-wrap]
 [:editor :lt.objs.style/set-theme "default"]
 [:editor :lt.objs.editor/line-numbers]

 ;;[:editor :lt.plugins.vim/activate-vim]

 ;; Here we can add behaviors to just clojure editors
 [:editor.clojure :lt.plugins.clojure/print-length 120]

 ;; Behaviors specific to a user-defined object
 [:user.hello :lt.plugins.user/on-close-destroy]

 [:app :lt.objs.settings/pair-keymap-diffs]

 [:edditor :lt.objs.editor/set-rulers [{:lineStyle "dashed" :color "#aff" :column 90}]]

 [:editor :-lt.plugins.vim/activate-vim]

 [:app :lt.objs.settings/pair-keymap-diffs]

 [:app :lt.objs.console/set-console-limit 9999999]

 [:editor :lt.plugins.visible-whitespace/show-whitespace]
 ;;  (:lt.plugins.vim/map-keys {;; \\ is leader key for paredit
;;                             ;; loosely inspired by https://groups.google.com/forum/#!topic/light-table-discussion/BIyWHnRcoWc
;;                             "\\." ":ltexec paredit.grow.right"
;;                             "\\," ":ltexec paredit.shrink.right"
;;                             "\\<" ":ltexec paredit.grow.left"
;;                             "\\>" ":ltexec paredit.shrink.left"
;;                             "\\b" ":ltexec ltfiles.paredit-kill-backword"
;;                             "\\d" ":ltexec paredit-plus.delete-pair-contents"
;;                             "\\f" ":ltexec paredit.move.down.forward"
;;                             "\\j" ":ltexec paredit-plus.join-sexps"
;;                             "\\k" ":ltexec ltfiles.paredit-kill"
;;                             "\\n" ":ltexec ltfiles.paredit-newline-before-pair-close"
;;                             "\\N" ":ltexec paredit-plus.new-line-after-pair-close"
;;                             "\\u" ":ltexec paredit.move.up.backward"
;;                             "\\r" ":ltexec paredit-plus.raise-sexp"
;;                             ;; handles top-level case that paredit doesn't
;;                             "\\s" ":ltexec paredit-plus.splice-sexp"
;;                             "\\|" ":ltexec paredit-plus.split-sexp"
;;                             "\\(" ":ltexec paredit-plus.wrap-round"
;;                             "\\{" ":ltexec paredit-plus.wrap-curly"
;;                             "\\[" ":ltexec paredit-plus.wrap-square"
;;                             "\\'" ":ltexec paredit-plus.wrap-quote"})

 ;; To subtract a behavior, prefix the name with '-' e.g.
 ;;  [:app :-lt.objs.intro/show-intro]
]

